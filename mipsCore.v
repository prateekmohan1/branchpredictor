//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/p/m/o/pmohan6/EEE591Brunhav/ProjPart4/Submission/primitives/mipsCore.vp
//  Source template: mipsCore
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// mipsCore.vp
// wordLength (_GENESIS2_DECLARATION_PRIORITY_) = 32
//

// issueWidth (_GENESIS2_DECLARATION_PRIORITY_) = 1
//

// rfReadPorts (_GENESIS2_DECLARATION_PRIORITY_) = 2
//
// rfWritePorts (_GENESIS2_DECLARATION_PRIORITY_) = 1
//
// rfEntryCount (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// rfAddressWidth (_GENESIS2_DECLARATION_PRIORITY_) = 5
//

// enableBTB (_GENESIS2_DECLARATION_PRIORITY_) = 0
//
// entrySizeBTB (_GENESIS2_DECLARATION_PRIORITY_) = 34
//
// entryCountBTB (_GENESIS2_DECLARATION_PRIORITY_) = 0
//

// MipsMode (_GENESIS2_DECLARATION_PRIORITY_) = Cyc1
//

// operations (_GENESIS2_DECLARATION_PRIORITY_) = 20
//


// First level FFs

// Second Level FFs

//Third Level FFs


//Fourth Level FFs

module mipsCore(

	//ICache IFC
	input logic [31:0] iCacheReadData,
	output logic [31:0] iCacheReadAddr,
	
	//DCache Ifc
	input logic [31:0] dCacheReadData,
	output logic [31:0] dCacheWriteData,
	output logic [31:0] dCacheAddr,
	output logic dCacheWriteEn,
	output logic dCacheReadEn,
	
	//Register File Ifc
	input logic [31:0] rfReadData_p0,
	output logic [4:0] rfReadAddr_p0,
	output logic rfReadEn_p0,
	input logic [31:0] rfReadData_p1,
	output logic [4:0] rfReadAddr_p1,
	output logic rfReadEn_p1,
	output logic [31:0] rfWriteData_p0,
	output logic [4:0] rfWriteAddr_p0,
	output logic rfWriteEn_p0,
	
	//BTB Ifc
	
	//Globals
	input logic clk,
	input logic rst
	
	);

	//PC Counter
	logic [31:0] PC;
	logic [31:0] PC_Next;
	
	//Decode input instr.
	logic [5:0]opcode;
	logic [5:0]special;
	logic [19:0]alu_op;
	logic sA, sB, sC, sD, sE, sF, sH;
	logic [1:0] sG;
	logic [3:0] sFor_rs, sFor_rt;
	logic [1:0] sK;
	logic [2:0] sI;
	logic [2:0] sI_Flag;
	logic [31:0]rs;
	logic [31:0]rt;
	logic [63:0]alu_o;
	logic [31:0]signext;
	logic [31:0]instr;
	logic [31:0] original_instr;

	logic [4:0] instr25_21Dec;
	logic [4:0] instr20_16Dec;
	logic [4:0] instr15_11Dec;

	logic [31:0] src0;
	logic [31:0] src1;

	logic [4:0] sraVal;
	logic data_hazFlag;
	logic jump_Flag;
	logic three_cycle, two_cycle,back_to_back;

	logic [1:0] sCnt;
	
	logic w1511r2521_WB;
	logic w1511r2016_WB;
	logic w2016r2521_WB;
	logic w2016r2016_WB;
	logic w1511r2521_MEM;
	logic w1511r2016_MEM;
	logic w2016r2521_MEM;
	logic w2016r2016_MEM;
	logic w1511r2521_ALU;
	logic w1511r2016_ALU;
	logic w2016r2521_ALU;
	logic w2016r2016_ALU;

	logic set1_ALU, set1_WB, set1_REG, set1_MEM;
	logic set2_ALU, set2_WB, set2_REG, set2_MEM;
	logic set1_REG_SLL;

	logic set1_MEM_MFHI;
	logic set1_MEM_MFLO;
	logic set1_ALU_MFHI;
	logic set1_ALU_MFLO;

	//LO and HI	
	logic [31:0] LO_d;
	logic [31:0] HI_d;
	logic [31:0] LO_f;
	logic [31:0] LO_f1;
	logic [31:0] LO_f2;
	logic [31:0] HI_f;
	logic [31:0] HI_f1;
	logic [31:0] HI_f2;

	//Flops
	logic [31:0] instr_f1;
	logic [19:0] alu_op_f1;
	logic [4:0] instr25_21Dec_f1;
	logic [4:0] instr20_16Dec_f1;
	logic [4:0] instr15_11Dec_f1;
	logic sF_f1;
	logic [31:0] signext_f1;
	logic sC_f1;
	logic sH_f1;
	logic sD_f1;
	logic sE_f1;
	logic [4:0] sraVal_f1;
	logic sA_f1;
	logic sB_f1;
	logic [1:0] sG_f1;
	logic [31:0] PC_f1;
	logic [31:0] PC_f2;
	logic [31:0] PC_f2_d;

	logic [19:0] alu_op_f1_d;
	logic [4:0] instr25_21Dec_f1_d;
	logic [4:0] instr20_16Dec_f1_d;
	logic [4:0] instr15_11Dec_f1_d;
	logic sF_f1_d;
	logic [31:0] signext_f1_d;
	logic sC_f1_d;
	logic sH_f1_d;
	logic sD_f1_d;
	logic sE_f1_d;
	logic [4:0] sraVal_f1_d;
	logic sA_f1_d;
	logic sB_f1_d;
	logic [1:0] sG_f1_d;
	logic [31:0] src0_f1_d;
	logic [31:0] src1_f1_d;

	logic [19:0] alu_op_f2_d;
	logic [4:0] instr25_21Dec_f2_d;
	logic [4:0] instr20_16Dec_f2_d;
	logic [4:0] instr15_11Dec_f2_d;
	logic sF_f2_d;
	logic [31:0] signext_f2_d;
	logic sC_f2_d;
	logic sH_f2_d;
	logic sD_f2_d;
	logic sE_f2_d;
	logic [4:0] sraVal_f2_d;
	logic sA_f2_d;
	logic sB_f2_d;
	logic [1:0] sG_f2_d;
	
	logic [19:0] alu_op_f2;
	logic [4:0] instr25_21Dec_f2;
	logic [4:0] instr20_16Dec_f2;
	logic [4:0] instr15_11Dec_f2;
	logic sF_f2;
	logic [31:0] signext_f2;
	logic [31:0] src0_f1;
	logic [31:0] src1_f1;
	logic sH_f2;
	logic sD_f2;
	logic sE_f2;
	logic [4:0] sraVal_f2;
	logic sA_f2;
	logic sB_f2;
	logic [1:0] sG_f2;
	
	logic [19:0] alu_op_f3;
	logic [63:0] alu_o_f1;
	logic [4:0] instr20_16Dec_f3;
	logic [4:0] instr15_11Dec_f3;
	logic sF_f3;
	logic [31:0] src1_f2;
	logic sH_f3;
	logic sD_f3;
	logic sE_f3;
	logic [1:0] sG_f3;
	logic sB_f3;

	logic [63:0] alu_o_f2;
	logic [19:0] alu_op_f4;
	logic [31:0] dCacheReadData_f1;
	logic [4:0] instr20_16Dec_f4;
	logic [4:0] instr15_11Dec_f4;
	logic sF_f4;
	logic sH_f4;
	logic [1:0] sG_f4;

	logic [1:0] sJ_in;
	logic [1:0] sJ;
	logic cnt;
	logic [2:0] cnt_in;

	logic [1:0] bType;

	//SeqMult control
	logic ab_valid;
	logic mult_flag;
	logic ab_ready;
	logic ab_ready_f1;
	logic z_valid;
	logic z_valid_f1;

	//SeqDiv control
	logic nd_valid;
	logic nd_ready;
	logic nd_ready_f1;
	logic qr_valid;
	logic qr_valid_f1;

	//Check if branch
	logic is_branch;
	logic branch_equality;
	logic [31:0] predicted_addr;
	logic result, result_f1, result_f2;
	logic PC_choose, prediction;

	alu  my_alu(
	.nd_valid(nd_valid),
	.nd_ready(nd_ready),
	.qr_valid(qr_valid),
	.ab_valid(ab_valid),
	.ab_ready(ab_ready),
	.z_valid(z_valid),
	.opcode(alu_op_f2),
	.rs(rs),
	.rt(rt),
	.alu_out(alu_o),
	.clk(clk),
	.rst(rst)
	);



	dffbW_unq6  dff_prediction_f1(.d(prediction),.clk(clk),.rst(rst),.q(prediction_f1));	
	dffbW_unq6  dff_prediction_f2(.d(prediction_f1),.clk(clk),.rst(rst),.q(prediction_f2));	

	dffbW_unq1  dff_PC_f1(.d(PC),.clk(clk),.rst(rst),.q(PC_f1));	
	dffbW_unq1  dff_instr_f1(.d(instr),.clk(clk),.rst(rst),.q(instr_f1));	
	dffbW_unq4  dff_alu_op_f1(.d(alu_op_f1_d),.clk(clk),.rst(rst),.q(alu_op_f1));	
	dffbW_unq5  dff_instr25_21Dec_f1(.d(instr25_21Dec_f1_d),.clk(clk),.rst(rst),.q(instr25_21Dec_f1));	
	dffbW_unq5  dff_instr20_16Dec_f1(.d(instr20_16Dec_f1_d),.clk(clk),.rst(rst),.q(instr20_16Dec_f1));	
	dffbW_unq5  dff_instr15_11Dec_f1(.d(instr15_11Dec_f1_d),.clk(clk),.rst(rst),.q(instr15_11Dec_f1));	
	dffbW_unq6  dff_sF_f1(.d(sF_f1_d),.clk(clk),.rst(rst),.q(sF_f1));	
	dffbW_unq1  dff_signext_f1(.d(signext_f1_d),.clk(clk),.rst(rst),.q(signext_f1));	
	dffbW_unq6  dff_sC_f1(.d(sC_f1_d),.clk(clk),.rst(rst),.q(sC_f1));	
	dffbW_unq6  dff_sH_f1(.d(sH_f1_d),.clk(clk),.rst(rst),.q(sH_f1));	
	dffbW_unq6  dff_sD_f1(.d(sD_f1_d),.clk(clk),.rst(rst),.q(sD_f1));	
	dffbW_unq6  dff_sE_f1(.d(sE_f1_d),.clk(clk),.rst(rst),.q(sE_f1));	
	dffbW_unq6  dff_sA_f1(.d(sA_f1_d),.clk(clk),.rst(rst),.q(sA_f1));	
	dffbW_unq6  dff_sB_f1(.d(sB_f1_d),.clk(clk),.rst(rst),.q(sB_f1));	
	dffbW_unq7  dff_sG_f1(.d(sG_f1_d),.clk(clk),.rst(rst),.q(sG_f1));	
	dffbW_unq5  dff_sraVal_f1(.d(sraVal_f1_d),.clk(clk),.rst(rst),.q(sraVal_f1));

//Valid flops
	dffbW_unq6  dff_z_valid_f(.d(z_valid),.clk(clk),.rst(rst),.q(z_valid_f1));
	dffbW_unq6  dff_ab_ready_f(.d(ab_ready),.clk(clk),.rst(rst),.q(ab_ready_f1));
	dffbW_unq6  dff_nd_valid_f(.d(qr_valid),.clk(clk),.rst(rst),.q(qr_valid_f1));
	dffbW_unq6  dff_qr_ready_f(.d(nd_ready),.clk(clk),.rst(rst),.q(nd_ready_f1));
	
	dffbW_unq1  dff_PC_f2(.d(PC_f1),.clk(clk),.rst(rst),.q(PC_f2));
	dffbW_unq4  dff_alu_op_f2(.d(alu_op_f2_d),.clk(clk),.rst(rst),.q(alu_op_f2));
	dffbW_unq5  dff_instr25_21Dec_f2(.d(instr25_21Dec_f2_d),.clk(clk),.rst(rst),.q(instr25_21Dec_f2));		
	dffbW_unq5  dff_instr20_16Dec_f2(.d(instr20_16Dec_f2_d),.clk(clk),.rst(rst),.q(instr20_16Dec_f2));	
	dffbW_unq5  dff_instr15_11Dec_f2(.d(instr15_11Dec_f2_d),.clk(clk),.rst(rst),.q(instr15_11Dec_f2));	
	dffbW_unq6  dff_sF_f2(.d(sF_f2_d),.clk(clk),.rst(rst),.q(sF_f2));	
	dffbW_unq1  dff_signext_f2(.d(signext_f2_d),.clk(clk),.rst(rst),.q(signext_f2));	
	dffbW_unq6  dff_sH_f2(.d(sH_f2_d),.clk(clk),.rst(rst),.q(sH_f2));	
	dffbW_unq6  dff_sD_f2(.d(sD_f2_d),.clk(clk),.rst(rst),.q(sD_f2));	
	dffbW_unq6  dff_sE_f2(.d(sE_f2_d),.clk(clk),.rst(rst),.q(sE_f2));	
	dffbW_unq6  dff_sA_f2(.d(sA_f2_d),.clk(clk),.rst(rst),.q(sA_f2));	
	dffbW_unq6  dff_sB_f2(.d(sB_f2_d),.clk(clk),.rst(rst),.q(sB_f2));	
	dffbW_unq7  dff_sG_f2(.d(sG_f2_d),.clk(clk),.rst(rst),.q(sG_f2));	
	dffbW_unq5  dff_sraVal_f2(.d(sraVal_f2_d),.clk(clk),.rst(rst),.q(sraVal_f2));	
	dffbW_unq1  dff_src0_f1(.d(src0_f1_d),.clk(clk),.rst(rst),.q(src0_f1));	
	dffbW_unq1  dff_src1_f1(.d(src1_f1_d),.clk(clk),.rst(rst),.q(src1_f1));	

	dffbW_unq4  dff_alu_op_f3(.d(alu_op_f2),.clk(clk),.rst(rst),.q(alu_op_f3));
	dffbW_unq5  dff_instr20_16Dec_f3(.d(instr20_16Dec_f2),.clk(clk),.rst(rst),.q(instr20_16Dec_f3));	
	dffbW_unq5  dff_instr15_11Dec_f3(.d(instr15_11Dec_f2),.clk(clk),.rst(rst),.q(instr15_11Dec_f3));	
	dffbW_unq6  dff_sF_f3(.d(sF_f2),.clk(clk),.rst(rst),.q(sF_f3));	
	dffbW_unq6  dff_sH_f3(.d(sH_f2),.clk(clk),.rst(rst),.q(sH_f3));	
	dffbW_unq6  dff_sD_f3(.d(sD_f2),.clk(clk),.rst(rst),.q(sD_f3));	
	dffbW_unq6  dff_sE_f3(.d(sE_f2),.clk(clk),.rst(rst),.q(sE_f3));	
	dffbW_unq7  dff_sG_f3(.d(sG_f2),.clk(clk),.rst(rst),.q(sG_f3));	
	dffbW_unq6  dff_sB_f3(.d(sB_f2),.clk(clk),.rst(rst),.q(sB_f3));	
	dffbW_unq2  dff_alu_o_f1(.d(alu_o),.clk(clk),.rst(rst),.q(alu_o_f1));
	dffbW_unq1  dff_src1_f2(.d(src1_f1),.clk(clk),.rst(rst),.q(src1_f2));	
	dffbW_unq1  dff_LO_f1(.d(LO_d),.clk(clk),.rst(rst),.q(LO_f1));	
	dffbW_unq1  dff_HI_f1(.d(HI_d),.clk(clk),.rst(rst),.q(HI_f1));	

	dffbW_unq4  dff_alu_op_f4(.d(alu_op_f3),.clk(clk),.rst(rst),.q(alu_op_f4));
	dffbW_unq5  dff_instr20_16Dec_f4(.d(instr20_16Dec_f3),.clk(clk),.rst(rst),.q(instr20_16Dec_f4));	
	dffbW_unq5  dff_instr15_11Dec_f4(.d(instr15_11Dec_f3),.clk(clk),.rst(rst),.q(instr15_11Dec_f4));	
	dffbW_unq6  dff_sF_f4(.d(sF_f3),.clk(clk),.rst(rst),.q(sF_f4));	
	dffbW_unq6  dff_sH_f4(.d(sH_f3),.clk(clk),.rst(rst),.q(sH_f4));	
	dffbW_unq7  dff_sG_f4(.d(sG_f3),.clk(clk),.rst(rst),.q(sG_f4));	
	dffbW_unq2  dff_alu_o_f2(.d(alu_o_f1),.clk(clk),.rst(rst),.q(alu_o_f2));
	dffbW_unq1  dff_dCacheReadData_f1(.d(dCacheReadData),.clk(clk),.rst(rst),.q(dCacheReadData_f1));
	dffbW_unq1  dff_LO_f2(.d(LO_f1),.clk(clk),.rst(rst),.q(LO_f2));	
	dffbW_unq1  dff_HI_f2(.d(HI_f1),.clk(clk),.rst(rst),.q(HI_f2));	


	dffbW_unq6  dff_result_f1(.d(result),.clk(clk),.rst(rst),.q(result_f1));	
	dffbW_unq6  dff_result_f2(.d(result_f1),.clk(clk),.rst(rst),.q(result_f2));	

	//Instantiation of the branch predictor
	bpredict branchPredictor(.pc(iCacheReadAddr),
							 .immedval({{14{instr[15]}},{instr[15:0]},{2'b0}}),
							 .branch_equality(branch_equality),
							 .is_branch(is_branch),
							 .clk(clk),
							 .rst(rst),
							 .address(predicted_addr),
							 .result(result),
							 .PC_choose(PC_choose),
							 .prediction(prediction)
							);


	//Set AB_valid and ND_valid to 0 at reset//
	//always_ff @ (negedge rst) begin
	//	ab_valid = 0;
	//	nd_valid = 0;
	//end
	//Set AB_valid and ND_valid to 0 at reset//	

	//////////////PC Flops///////////
        //Flip Flop for state
        always_ff @ (negedge clk, negedge rst) begin
                if (~rst) begin
                        PC <= 0;
                end
                else begin
                        PC <= PC_Next;
                end
        end
	//////////////PC Flops///////////

	//////////////cnt Flops///////////
        always_ff @ (negedge clk, negedge rst) begin
                if (~rst) begin
                        cnt <= 0;
                end
                else begin
                        cnt <= 1;
                end
        end
	//////////////cnt Flops///////////

        /////Flops for LO and HI//////
        always_ff @ (negedge rst, negedge clk) begin
                if (~rst) begin
                        LO_f <= 0;
                end
                else begin
                        LO_f <= LO_d;
                end
        end
        always_ff @ (negedge clk, negedge rst) begin
                if (~rst) begin
                        HI_f <= 0;
                end
                else begin
                        HI_f <= HI_d;
                end
        end
        /////Flops for LO and HI//////

	always_comb begin
                if (z_valid) begin   // MULT
                        LO_d = alu_o[31:0];
                        HI_d = alu_o[63:32];
                end
                else if (qr_valid) begin   //DIV
                        LO_d = alu_o[31:0];
                        HI_d = alu_o[63:32];
                end
                else begin
                        LO_d = LO_f;
                        HI_d = HI_f;
                end
	end

	always_comb begin

		w1511r2521_WB = (instr15_11Dec_f4 == instr25_21Dec_f1) ? 1 : 0;
		w1511r2016_WB = (instr15_11Dec_f4 == instr20_16Dec_f1) ? 1 : 0;
		w2016r2521_WB = (instr20_16Dec_f4 == instr25_21Dec_f1) ? 1 : 0;
		w2016r2016_WB = (instr20_16Dec_f4 == instr20_16Dec_f1) ? 1 : 0;

		w1511r2521_MEM = (instr15_11Dec_f3 == instr25_21Dec_f1) ? 1 : 0;
		w1511r2016_MEM = (instr15_11Dec_f3 == instr20_16Dec_f1) ? 1 : 0;
		w2016r2521_MEM = (instr20_16Dec_f3 == instr25_21Dec_f1) ? 1 : 0;
		w2016r2016_MEM = (instr20_16Dec_f3 == instr20_16Dec_f1) ? 1 : 0;

		w1511r2521_ALU = (instr15_11Dec_f2 == instr25_21Dec_f1) ? 1 : 0;
		w1511r2016_ALU = (instr15_11Dec_f2 == instr20_16Dec_f1) ? 1 : 0;
		w2016r2521_ALU = (instr20_16Dec_f2 == instr25_21Dec_f1) ? 1 : 0;
		w2016r2016_ALU = (instr20_16Dec_f2 == instr20_16Dec_f1) ? 1 : 0;

		set1_ALU = (alu_op_f2 == 20'b10000000000000000000 || //ADD
		    alu_op_f2 == 20'b01000000000000000000 || //AND
		    alu_op_f2 == 20'b00100000000000000000 || //NOR
		    alu_op_f2 == 20'b00010000000000000000 || //OR
		    alu_op_f2 == 20'b00001000000000000000 || //SLT
		    alu_op_f2 == 20'b00000100000000000000 || //SUB
		    alu_op_f2 == 20'b00000010000000000000 || //XOR
		    alu_op_f2 == 20'b00000000000000011111 || //MULT
		    alu_op_f2 == 20'b00000000000000111111 || //DIV
		    alu_op_f2 == 20'b00000000000000001000 || //BEQ
		    alu_op_f2 == 20'b00000000000000000010 || //BNE
		    alu_op_f2 == 20'b00000000000000000111 || //SLL
		    alu_op_f2 == 20'b00000000000001111111 || //MFHI
		    alu_op_f2 == 20'b00000000000011111111 || //MFLO
		    alu_op_f2 == 20'b00000000000000010000) ? 1 : 0;				//SW

		set1_MEM = (alu_op_f3 == 20'b10000000000000000000 || //ADD
		    alu_op_f3 == 20'b01000000000000000000 || //AND
		    alu_op_f3 == 20'b00100000000000000000 || //NOR
		    alu_op_f3 == 20'b00010000000000000000 || //OR
		    alu_op_f3 == 20'b00001000000000000000 || //SLT
		    alu_op_f3 == 20'b00000100000000000000 || //SUB
		    alu_op_f3 == 20'b00000010000000000000 || //XOR
		    alu_op_f3 == 20'b00000000000000011111 || //MULT
		    alu_op_f3 == 20'b00000000000000111111 || //DIV
		    alu_op_f3 == 20'b00000000000000001000 || //BEQ
		    alu_op_f3 == 20'b00000000000000000010 || //BNE
		    alu_op_f3 == 20'b00000000000000000111 || //SLL
		    alu_op_f3 == 20'b00000000000001111111 || //MFHI
		    alu_op_f3 == 20'b00000000000011111111 || //MFLO
		    alu_op_f3 == 20'b00000000000000010000) ? 1 : 0;				//SW

		set1_WB = (alu_op_f4 == 20'b10000000000000000000 || //ADD
		    alu_op_f4 == 20'b01000000000000000000 || //AND
		    alu_op_f4 == 20'b00100000000000000000 || //NOR
		    alu_op_f4 == 20'b00010000000000000000 || //OR
		    alu_op_f4 == 20'b00001000000000000000 || //SLT
		    alu_op_f4 == 20'b00000100000000000000 || //SUB
		    alu_op_f4 == 20'b00000010000000000000 || //XOR
                    alu_op_f4 == 20'b00000000000000011111 || //MULT
                    alu_op_f4 == 20'b00000000000000111111 || //DIV
		    alu_op_f4 == 20'b00000000000000001000 || //BEQ
		    alu_op_f4 == 20'b00000000000000000010 || //BNE
		    alu_op_f4 == 20'b00000000000000000111 || //SLL
		    alu_op_f4 == 20'b00000000000001111111 || //MFHI
		    alu_op_f4 == 20'b00000000000011111111 || //MFLO
		    alu_op_f4 == 20'b00000000000000010000) ? 1 : 0;				//SW

		set1_REG = (alu_op_f1 == 20'b10000000000000000000 || //ADD
		    alu_op_f1 == 20'b01000000000000000000 || //AND
		    alu_op_f1 == 20'b00100000000000000000 || //NOR
		    alu_op_f1 == 20'b00010000000000000000 || //OR
		    alu_op_f1 == 20'b00001000000000000000 || //SLT
		    alu_op_f1 == 20'b00000100000000000000 || //SUB
		    alu_op_f1 == 20'b00000010000000000000 || //XOR
                    alu_op_f1 == 20'b00000000000000011111 || //MULT
                    alu_op_f1 == 20'b00000000000000111111 || //DIV
		    alu_op_f1 == 20'b00000000000000001000 || //BEQ
		    alu_op_f1 == 20'b00000000000000000010 || //BNE
		    alu_op_f1 == 20'b00000000000000000111 || //SLL
		    alu_op_f1 == 20'b00000000000000010000) ? 1 : 0;				//SW

		set2_ALU = (alu_op_f2 == 20'b00000000010000000000 || //ADDI
		    alu_op_f2 == 20'b00000000001000000000 || //ANDI
		    alu_op_f2 == 20'b00000000000100000000 || //ORI
		    alu_op_f2 == 20'b00000000000001000000 || //XORI
		    alu_op_f2 == 20'b00000000000010000000 || //SLTI
		    alu_op_f2 == 20'b00000000000000100000 || //LW
		    alu_op_f2 == 20'b00000000000000000100 || //BGTZ
		    alu_op_f2 == 20'b00000000000000000011 || //LUI
		    alu_op_f2 == 20'b00000000100000000000) ? 1 : 0;	//JR

		set2_MEM = (alu_op_f3 == 20'b00000000010000000000 || //ADDI
		    alu_op_f3 == 20'b00000000001000000000 || //ANDI
		    alu_op_f3 == 20'b00000000000100000000 || //ORI
		    alu_op_f3 == 20'b00000000000001000000 || //XORI
		    alu_op_f3 == 20'b00000000000010000000 || //SLTI
		    alu_op_f3 == 20'b00000000000000100000 || //LW
		    alu_op_f3 == 20'b00000000000000000100 || //BGTZ
		    alu_op_f3 == 20'b00000000000000000011 || //LUI
		    alu_op_f3 == 20'b00000000100000000000) ? 1 : 0;	//JR

		set2_WB = (alu_op_f4 == 20'b00000000010000000000 || //ADDI
		    alu_op_f4 == 20'b00000000001000000000 || //ANDI
		    alu_op_f4 == 20'b00000000000100000000 || //ORI
		    alu_op_f4 == 20'b00000000000001000000 || //XORI
		    alu_op_f4 == 20'b00000000000010000000 || //SLTI
		    alu_op_f4 == 20'b00000000000000100000 || //LW
		    alu_op_f4 == 20'b00000000000000000100 || //BGTZ
		    alu_op_f4 == 20'b00000000000000000011 || //LUI
		    alu_op_f4 == 20'b00000000100000000000) ? 1 : 0;	//JR

		set2_REG = (alu_op_f1 == 20'b00000000010000000000 || //ADDI
		    alu_op_f1 == 20'b00000000001000000000 || //ANDI
		    alu_op_f1 == 20'b00000000000100000000 || //ORI
		    alu_op_f1 == 20'b00000000000001000000 || //XORI
		    alu_op_f1 == 20'b00000000000010000000 || //SLTI
		    alu_op_f1 == 20'b00000000000000100000 || //LW
		    alu_op_f1 == 20'b00000000000000000100 || //BGTZ
		    alu_op_f1 == 20'b00000000000000000011 || //LUI
		    alu_op_f1 == 20'b00000000100000000000) ? 1 : 0;	//JR

		set1_REG_SLL = (alu_op_f1 == 20'b00000000000000000111) ? 1 : 0; //SLL

		set1_MEM_MFHI = (alu_op_f3 == 20'b00000000000001111111) ? 1 : 0; 
		set1_MEM_MFLO = (alu_op_f3 == 20'b00000000000011111111) ? 1 : 0; 
		set1_ALU_MFHI = (alu_op_f2 == 20'b00000000000001111111) ? 1 : 0;
		set1_ALU_MFLO = (alu_op_f2 == 20'b00000000000011111111) ? 1 : 0;

		sJ = 1;
		sFor_rs = 0;
		sFor_rt = 0;
		sK = 1;
		sI = 3'd1;
		data_hazFlag = 0;
		is_branch = 0;
		branch_equality = 0;
		
		if (sH_f4 || sH_f3 || sH_f2) begin
			if (sH_f4) begin
				if (sC_f1) begin
					if (set1_WB) begin
						if (set1_REG)	begin //set1 in REG
							if (w1511r2521_WB && !set1_REG_SLL) sFor_rs = 4;
							if (w1511r2016_WB) sFor_rt = 4;
						end
						if (set2_REG) begin
							if (w1511r2521_WB) sFor_rs = 4;
						end
					end
					if (set2_WB) begin
						if (set1_REG) begin  //set1 in REG
							if (w2016r2016_WB) sFor_rt = 4;
							if (w2016r2521_WB && !set1_REG_SLL) sFor_rs = 4;
						end
						if (set2_REG) begin
							if (w2016r2521_WB) sFor_rs = 4;
						end
					end
					if (sH_f3) begin
						if (sC_f1) begin
							if (set1_MEM) begin
								if (set1_MEM_MFHI) begin
									if (set1_REG) begin
										if (w1511r2521_MEM && !set1_REG_SLL) sFor_rs = 7;
										if (w1511r2016_MEM) sFor_rt = 7;
									end
									if (set2_REG) begin
										if (w1511r2521_MEM) sFor_rs = 7;
									end
								end
								else if (set1_MEM_MFLO) begin
									if (set1_REG) begin
										if (w1511r2521_MEM && !set1_REG_SLL) sFor_rs = 8;
										if (w1511r2016_MEM) sFor_rt = 8;
									end
									if (set2_REG) begin
										if (w1511r2521_MEM) sFor_rs = 8;
									end
								end
								else begin
									if (set1_REG) begin
										if (w1511r2521_MEM && !set1_REG_SLL) sFor_rs = 3;
										if (w1511r2016_MEM) sFor_rt = 3;
									end
									if (set2_REG) begin
										if (w1511r2521_MEM) sFor_rs = 3;
									end	
								end
							end
							if (set2_MEM) begin
								if (sD_f3 == 1) begin	//LW
									if (set1_REG) begin	
										if (w2016r2016_MEM) sFor_rt = 2;
										if (w2016r2521_MEM && !set1_REG_SLL) sFor_rs = 2;
									end
									if (set2_REG) begin
										if (w2016r2521_MEM) sFor_rs = 2;
									end
								end
								else begin		//Not a LW
									if (set1_REG) begin
										if (w2016r2016_MEM) sFor_rt = 3;
										if (w2016r2521_MEM && !set1_REG_SLL) sFor_rs = 3;
									end
									if (set2_REG) begin	
										if (w2016r2521_MEM) sFor_rs = 3;
									end
								end
							end
							if (sH_f2) begin
								if (sC_f1) begin
									if (set1_ALU) begin
										if (set1_ALU_MFHI) begin
											if (set1_REG) begin
												if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 6;
												if (w1511r2016_ALU) sFor_rt = 6;
											end
											if (set2_REG) begin
												if (w1511r2521_ALU) sFor_rs = 6;
											end
										end
										else if (set1_ALU_MFLO) begin
											if (set1_REG) begin
												if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 5;
												if (w1511r2016_ALU) sFor_rt = 5;
											end
											if (set2_REG) begin
												if (w1511r2521_ALU) sFor_rs = 5;
											end
										end
										else begin
											if (set1_REG) begin
												if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 1;
												if (w1511r2016_ALU) sFor_rt = 1;
											end
											if (set2_REG) begin
												if (w1511r2521_ALU) sFor_rs = 1;
											end
										end
									end
									if (set2_ALU) begin
										if (sD_f1) begin //LW 
											if (set1_REG) begin
												if (w2016r2016_ALU) begin
													sJ = 0; sK = 2; sI = 3'b0;
												end
												if (w2016r2521_ALU && !set1_REG_SLL) begin
													sJ = 0; sK = 2; sI = 3'b0;
												end
											end
											if (set2_REG) begin
												if (w2016r2521_ALU) begin
													sJ = 0; sK = 2; sI = 3'b0;
												end
											end
										end
										else begin // Not a LW
											if (set1_REG) begin
												if (w2016r2016_ALU) sFor_rt = 1;
												if (w2016r2521_ALU && !set1_REG_SLL) sFor_rs = 1;
											end
											if (set2_REG) begin
												if (w2016r2521_ALU) sFor_rs = 1;
											end
										end
									end
								end				
							end
						end
					end							
				end
			end

			if (sH_f3) begin
				if (sC_f1) begin
					if (set1_MEM) begin
                                                if (set1_MEM_MFHI) begin
                                                        if (set1_REG) begin
                                                                if (w1511r2521_MEM && !set1_REG_SLL) sFor_rs = 7;
                                                                if (w1511r2016_MEM) sFor_rt = 7;
                                                        end
                                                        if (set2_REG) begin
                                                                if (w1511r2521_MEM) sFor_rs = 7;
                                                        end
                                                end
                                                else if (set1_MEM_MFLO) begin
                                                        if (set1_REG) begin
                                                                if (w1511r2521_MEM && !set1_REG_SLL) sFor_rs = 8;
                                                                if (w1511r2016_MEM) sFor_rt = 8;
                                                        end
                                                        if (set2_REG) begin
                                                                if (w1511r2521_MEM) sFor_rs = 8;
                                                        end
                                                end
                                                else begin
                                                        if (set1_REG) begin
                                                                if (w1511r2521_MEM && !set1_REG_SLL) sFor_rs = 3;
                                                                if (w1511r2016_MEM) sFor_rt = 3;
                                                        end
                                                        if (set2_REG) begin
                                                                if (w1511r2521_MEM) sFor_rs = 3;
                                                        end
                                                end
					end
					if (set2_MEM) begin
						if (sD_f3 == 1) begin	//LW
							if (set1_REG) begin	
								if (w2016r2016_MEM) sFor_rt = 2;
								if (w2016r2521_MEM && !set1_REG_SLL) sFor_rs = 2;
							end
							if (set2_REG) begin
								if (w2016r2521_MEM) sFor_rs = 2;
							end
						end
						else begin		//Not a LW
							if (set1_REG) begin
								if (w2016r2016_MEM) sFor_rt = 3;
								if (w2016r2521_MEM && !set1_REG_SLL) sFor_rs = 3;
							end
							if (set2_REG) begin	
								if (w2016r2521_MEM) sFor_rs = 3;
							end
						end
					end
					if (sH_f2) begin
						if (sC_f1) begin
							if (set1_ALU) begin
                                                                if (set1_ALU_MFHI) begin
                                                                        if (set1_REG) begin
                                                                                if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 6;
                                                                                if (w1511r2016_ALU) sFor_rt = 6;
                                                                        end
                                                                        if (set2_REG) begin
                                                                                if (w1511r2521_ALU) sFor_rs = 6;
                                                                        end
                                                                end
                                                                else if (set1_ALU_MFLO) begin
                                                                        if (set1_REG) begin
                                                                                if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 5;
                                                                                if (w1511r2016_ALU) sFor_rt = 5;
                                                                        end
                                                                        if (set2_REG) begin
                                                                                if (w1511r2521_ALU) sFor_rs = 5;
                                                                        end
                                                                end
                                                                else begin
                                                                        if (set1_REG) begin
                                                                                if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 1;
                                                                                if (w1511r2016_ALU) sFor_rt = 1;
                                                                        end
                                                                        if (set2_REG) begin
                                                                                if (w1511r2521_ALU) sFor_rs = 1;
                                                                        end
                                                                end
							end
							if (set2_ALU) begin
								if (sD_f1) begin //LW 
									if (set1_REG) begin
										if (w2016r2016_ALU) begin
											sJ = 0; sK = 2; sI = 3'b0;
										end
										if (w2016r2521_ALU && !set1_REG_SLL) begin
											sJ = 0; sK = 2; sI = 3'b0;
										end
									end
									if (set2_REG) begin
										if (w2016r2521_ALU) begin
											sJ = 0; sK = 2; sI = 3'b0;
										end
									end
								end
								else begin // Not a LW
									if (set1_REG) begin
										if (w2016r2016_ALU) sFor_rt = 1;
										if (w2016r2521_ALU && !set1_REG_SLL) sFor_rs = 1;
									end
									if (set2_REG) begin
										if (w2016r2521_ALU) sFor_rs = 1;
									end
								end
							end
						end				
					end
				end
			end							


			if (sH_f2) begin
				if (sC_f1) begin
					if (set1_ALU) begin
                                                if (set1_ALU_MFHI) begin
                                                        if (set1_REG) begin
                                                                if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 6;
                                                                if (w1511r2016_ALU) sFor_rt = 6;
                                                        end
                                                        if (set2_REG) begin
                                                                if (w1511r2521_ALU) sFor_rs = 6;
                                                        end
                                                end
                                                else if (set1_ALU_MFLO) begin
                                                        if (set1_REG) begin
                                                                if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 5;
                                                                if (w1511r2016_ALU) sFor_rt = 5;
                                                        end
                                                        if (set2_REG) begin
                                                                if (w1511r2521_ALU) sFor_rs = 5;
                                                        end
                                                end
                                                else begin
                                                        if (set1_REG) begin
                                                                if (w1511r2521_ALU && !set1_REG_SLL) sFor_rs = 1;
                                                                if (w1511r2016_ALU) sFor_rt = 1;
                                                        end
                                                        if (set2_REG) begin
                                                                if (w1511r2521_ALU) sFor_rs = 1;
                                                        end
                                                end
					end
					if (set2_ALU) begin
						if (sD_f1) begin //LW 
							if (set1_REG) begin
								if (w2016r2016_ALU) begin
									sJ = 0; sK = 2; sI = 3'b0;
								end
								if (w2016r2521_ALU && !set1_REG_SLL) begin
									sJ = 0; sK = 2; sI = 3'b0;
								end
							end
							if (set2_REG) begin
								if (w2016r2521_ALU) begin
									sJ = 0; sK = 2; sI = 3'b0;
								end
							end
						end
						else begin // Not a LW
							if (set1_REG) begin
								if (w2016r2016_ALU) sFor_rt = 1;
								if (w2016r2521_ALU && !set1_REG_SLL) sFor_rs = 1;
							end
							if (set2_REG) begin
								if (w2016r2521_ALU) sFor_rs = 1;
							end
						end
					end
				end				
			end
		end

		//Jump instruction
		if (alu_op == 20'b00000000000000000001) begin
			jump_Flag = 1;
			sI = 3;
			sK = 0;
		end
		else begin
			jump_Flag = 0;
		end

		//Branch hazard checking and JR checking
		if ( ((alu_op_f1 == 20'b00000000000000001000) || (alu_op_f1 == 20'b00000000000000000100) || (alu_op_f1 == 20'b00000000000000000010) || (alu_op_f1 == 20'b00000000100000000000)) && (!sD_f2) ) begin
			if (alu_op_f1 == 20'b00000000000000001000) begin // BEQ
				is_branch = 1;
				if (src0_f1_d == src1_f1_d) begin
					//Here, the branch evaluated to true 
					if (result_f2 == 1 && prediction_f2 == 1) begin
						//Here, you got a hit in the BTB and you predicted taken - correct
						sI = 3'b001;
						sK = 1;
					end
					else if (result_f2 == 1 && prediction_f2 == 0) begin
						//Here you got a hit in the BTB and you predicted not taken - misprediction of not taken
						sI = 3'b010;
						sK = 0;	
					end
					else begin
						sI = 3'b010;
						sK = 0;	
					end
					branch_equality = 1;
					//sI = 3'b010;
					//sK = 0;	
				end
				else begin
					//Here the branch evaluated to false 
					branch_equality = 0;
					if (data_hazFlag == 1'b0 && jump_Flag == 1'b0) begin
						if (result_f2 == 1 && prediction_f2 == 1) begin
							//Here, you got a hit in the BTB and you predicted taken - misprediction of taken	
							sI = 3'b110;	
							sK = 0;
						end
						else if (result_f2 == 1 && prediction_f2 == 0) begin
							//Here, you got a hit in the BTB and predicted not taken - correct
							sI = 3'b001;
							sK = 1;
						end
						else begin
							//Here you don't have a hit, so you have to proceed like always
							sK = 1;
							sI = 3'b001;
						end
					end
				end
			end
			else if (alu_op_f1 == 20'b00000000000000000100) begin // BGTZ
				is_branch = 1;
				if (src0_f1_d > 0) begin
					if (result == 1 && prediction == 1) begin
						//Here, you got a hit in the BTB and you predicted taken - correct
						sI = 3'b001;
						sK = 1;
					end
					else if (result == 1 && prediction == 0) begin
						//Here you got a hit in the BTB and you predicted not taken - misprediction of not taken
						sI = 3'b010;
						sK = 0;	
					end
					else begin
						sI = 3'b010;
						sK = 0;	
					end
					branch_equality = 1;
					//sI = 3'b010;
					//sK = 0;	
				end
				else begin
					branch_equality = 0;
					if (data_hazFlag == 1'b0 && jump_Flag == 1'b0) begin
						if (result == 1 && prediction == 1) begin
							//Here, you got a hit in the BTB and you predicted taken - misprediction of taken	
							sI = 3'b110;	
							sK = 0;
						end
						else if (result == 1 && prediction == 0) begin
							//Here, you got a hit in the BTB and predicted not taken - correct
							sI = 3'b001;
							sK = 1;
						end
						else begin
							sK = 1;
							sI = 3'b001;
						end
						//sI = 3'b001;
						//sK = 1;
					end
				end
			end
			else if (alu_op_f1 == 20'b00000000000000000010) begin	//BNE
				is_branch = 1;
        	    if (src0_f1_d != src1_f1_d) begin
						branch_equality = 1;
						if (result == 1 && prediction == 1) begin
							//Here, you got a hit in the BTB and you predicted taken - correct
							sI = 3'b001;
							sK = 1;
						end
						else if (result == 1 && prediction == 0) begin
							//Here you got a hit in the BTB and you predicted not taken - misprediction of not taken
							sI = 3'b010;
							sK = 0;	
						end
						else begin
							sI = 3'b010;
							sK = 0;	
						end
        	            //sI = 3'b010;
        	            //sK = 0;
        	    end
        	    else begin
						branch_equality = 0;
        	            if (data_hazFlag == 1'b0 && jump_Flag == 1'b0) begin
							if (result == 1 && prediction == 1) begin
								//Here, you got a hit in the BTB and you predicted taken - misprediction of taken	
								sI = 3'b110;	
								sK = 0;
							end
							else if (result == 1 && prediction == 0) begin
								//Here, you got a hit in the BTB and predicted not taken - correct
								sI = 3'b001;
								sK = 1;
							end
							else begin
								sK = 1;
								sI = 3'b001;
							end
        	                    //sI = 3'b001;
        	                    //sK = 1;
        	            end
        	    end
			end
			else begin				//JR
				sI = 4;
				sK = 0;	
			end
		end
		
		//Code for doing a multiply
		if (!rst) begin
			ab_valid = 0;
			nd_valid = 0;
		end
		if (ab_ready && alu_op_f2 == 20'b00000000000000011111 && !z_valid) begin		//OP code is seqMult and you are ready
			ab_valid = 1;
			//Stall needed
			sI = 0;
			sJ = 2;
			sK = 2;
		end
		else if (!ab_ready && !z_valid) begin		//seqMult is multiplying & not done
			ab_valid = 0;
			//Stall needed
			sI = 0;
			sJ = 2;
			sK = 2;
		end
		else begin
			ab_valid = 0;
		end

		if (nd_ready && alu_op_f2 == 20'b00000000000000111111 && !qr_valid) begin		//OP code is seqDiv and you are ready
			nd_valid = 1;
			//Stall needed
			sI = 0;
			sJ = 3;
			sK = 2;
		end
		else if (!nd_ready && !qr_valid) begin		//seqDiv is dividing & not done
			nd_valid = 0;
			//Stall needed
			sI = 0;
			sJ = 3;
			sK = 2;
		end
		else begin
			nd_valid = 0;
		end


		if (PC_choose == 0) begin
			iCacheReadAddr = PC;
		end
		else begin
			iCacheReadAddr = predicted_addr;
			sI = 3'b101;
		end
		//Change sI based on branch predictor
		//if (result == 1) begin
		//	//sI = 5;
		//	iCacheReadAddr = predicted_addr;
		//end
		//else begin
		//	iCacheReadAddr = PC;
		//end
			

	end
	

	always_comb begin
		unique case (sJ)
		2'b00: begin
			alu_op_f2_d = 20'b00000000010000000000;			//For an ADDI instruction
			instr25_21Dec_f2_d = 4'b0;
			instr20_16Dec_f2_d = 4'b0;
			instr15_11Dec_f2_d = 4'b0;
			sF_f2_d = 1'b0;
			signext_f2_d = 31'b0;
			sC_f2_d = 1'b0;
			sH_f2_d = 1'b0;
			sD_f2_d = 1'b0;
			sE_f2_d = 1'b0;
			sraVal_f2_d = 5'b0;
			sA_f2_d = 1'b0;
			sB_f2_d = 1'b0;
			sG_f2_d = 2'b0;
		end
		2'b01: begin
			alu_op_f2_d = alu_op_f1;
			instr25_21Dec_f2_d = instr25_21Dec_f1;
			instr20_16Dec_f2_d = instr20_16Dec_f1;
			instr15_11Dec_f2_d = instr15_11Dec_f1;
			sF_f2_d = sF_f1;
			signext_f2_d = signext_f1;
			sC_f2_d = sC_f1;
			sH_f2_d = sH_f1;
			sD_f2_d = sD_f1;
			sE_f2_d = sE_f1;
			sraVal_f2_d = sraVal_f1;
			sA_f2_d = sA_f1;
			sB_f2_d = sB_f1;
			sG_f2_d = sG_f1;
		end
		2'b10: begin
			alu_op_f2_d = 20'b00000000000000011111;			//For a MULT inst
			instr25_21Dec_f2_d = 4'b0;
			instr20_16Dec_f2_d = 4'b0;
			instr15_11Dec_f2_d = 4'b0;
			sF_f2_d = 1'b0;
			signext_f2_d = 31'b0;
			sC_f2_d = 1'b0;
			sH_f2_d = 1'b0;
			sD_f2_d = 1'b0;
			sE_f2_d = 1'b0;
			sraVal_f2_d = 5'b0;
			sA_f2_d = 1'b0;
			sB_f2_d = 1'b0;
			sG_f2_d = 2'b0;
		end
		2'b11: begin
			alu_op_f2_d = 20'b00000000000000111111;			//For an DIV instruction
			instr25_21Dec_f2_d = 4'b0;
			instr20_16Dec_f2_d = 4'b0;
			instr15_11Dec_f2_d = 4'b0;
			sF_f2_d = 1'b0;
			signext_f2_d = 31'b0;
			sC_f2_d = 1'b0;
			sH_f2_d = 1'b0;
			sD_f2_d = 1'b0;
			sE_f2_d = 1'b0;
			sraVal_f2_d = 5'b0;
			sA_f2_d = 1'b0;
			sB_f2_d = 1'b0;
			sG_f2_d = 2'b0;
		end
		default: begin
			alu_op_f2_d = alu_op_f1;
			instr25_21Dec_f2_d = instr25_21Dec_f1;
			instr20_16Dec_f2_d = instr20_16Dec_f1;
			instr15_11Dec_f2_d = instr15_11Dec_f1;
			sF_f2_d = sF_f1;
			signext_f2_d = signext_f1;
			sC_f2_d = sC_f1;
			sH_f2_d = sH_f1;
			sD_f2_d = sD_f1;
			sE_f2_d = sE_f1;
			sraVal_f2_d = sraVal_f1;
			sA_f2_d = sA_f1;
			sB_f2_d = sB_f1;
			sG_f2_d = sG_f1;
		end
		endcase
	end

	always_comb begin
		unique case (sK)
		2'b00: begin
			alu_op_f1_d = 20'b00000000010000000000;			//For an ADDI instruction
			instr25_21Dec_f1_d = 4'b0;
			instr20_16Dec_f1_d = 4'b0;
			instr15_11Dec_f1_d = 4'b0;
			sF_f1_d = 1'b0;
			signext_f1_d = 31'b0;
			sC_f1_d = 1'b0;
			sH_f1_d = 1'b0;
			sD_f1_d = 1'b0;
			sE_f1_d = 1'b0;
			sraVal_f1_d = 5'b0;
			sA_f1_d = 1'b0;
			sB_f1_d = 1'b0;
			sG_f1_d = 2'b0;
		end
		2'b01: begin
			alu_op_f1_d = alu_op;
			instr25_21Dec_f1_d = instr25_21Dec;
			instr20_16Dec_f1_d = instr20_16Dec;
			instr15_11Dec_f1_d = instr15_11Dec;
			sF_f1_d = sF;
			signext_f1_d = signext;
			sC_f1_d = sC;
			sH_f1_d = sH;
			sD_f1_d = sD;
			sE_f1_d = sE;
			sraVal_f1_d = sraVal;
			sA_f1_d = sA;
			sB_f1_d = sB;
			sG_f1_d = sG;
		end
		2'b10: begin
			alu_op_f1_d = alu_op_f1;
			instr25_21Dec_f1_d = instr25_21Dec_f1;
			instr20_16Dec_f1_d = instr20_16Dec_f1;
			instr15_11Dec_f1_d = instr15_11Dec_f1;
			sF_f1_d = sF_f1;
			signext_f1_d = signext_f1;
			sC_f1_d = sC_f1;
			sH_f1_d = sH_f1;
			sD_f1_d = sD_f1;
			sE_f1_d = sE_f1;
			sraVal_f1_d = sraVal_f1;
			sA_f1_d = sA_f1;
			sB_f1_d = sB_f1;
			sG_f1_d = sG_f1;
		end
		default: begin
			alu_op_f1_d = alu_op;
			instr25_21Dec_f1_d = instr25_21Dec;
			instr20_16Dec_f1_d = instr20_16Dec;
			instr15_11Dec_f1_d = instr15_11Dec;
			sF_f1_d = sF;
			signext_f1_d = signext;
			sC_f1_d = sC;
			sH_f1_d = sH;
			sD_f1_d = sD;
			sE_f1_d = sE;
			sraVal_f1_d = sraVal;
			sA_f1_d = sA;
			sB_f1_d = sB;
			sG_f1_d = sG;
		end
		endcase
	end

	always_comb begin
		if (instr[15] == 1'b1) begin
                        signext = {{16{1'b1}},instr[15:0]};
		end
		else begin
			signext = {16'b0,instr[15:0]};
		end
	end

        always_ff @ (posedge clk, negedge cnt) begin
                if (cnt == 0) begin
                        instr <= 32'h00200825;
                end
                else begin
                        instr <= iCacheReadData;
                end
        end

	always_comb begin
		//if (cnt == 0) begin
		//	instr = 32'hffffffff;
		//end
		//else begin
		//	instr = iCacheReadData;
		//end
		//iCacheReadAddr = PC;
		
		instr25_21Dec = instr[25:21];
		instr20_16Dec = instr[20:16];
		instr15_11Dec = instr[15:11];

		rfReadAddr_p0 = instr25_21Dec_f1;
		rfReadAddr_p1 = instr20_16Dec_f1;
		
		sraVal = instr[10:6];
		src0 = rfReadData_p0;
		src1 = rfReadData_p1;

		dCacheWriteData = src1_f2;
		dCacheAddr = alu_o_f1;

	end

	always_comb begin
		unique case (sA_f2) 
			1'b0: rs = src0_f1;
			1'b1: rs = sraVal_f2;
			default: rs = 0;
		endcase
	end

	always_comb begin
		unique case (sFor_rs) 
			4'b0000: src0_f1_d = src0;
			4'b0001: src0_f1_d = alu_o;
			4'b0010: src0_f1_d = dCacheReadData;
			4'b0011: src0_f1_d = alu_o_f1;
			4'b0100: src0_f1_d = rfWriteData_p0;
			4'b0101: src0_f1_d = LO_d;
			4'b0110: src0_f1_d = HI_d;
			4'b0111: src0_f1_d = HI_f1;
			4'b1000: src0_f1_d = LO_f1;
			default: src0_f1_d = src0;
		endcase
	end

	always_comb begin
		unique case (sFor_rt) 
			4'b0000: src1_f1_d = src1;
			4'b0001: src1_f1_d = alu_o;
			4'b0010: src1_f1_d = dCacheReadData;
			4'b0011: src1_f1_d = alu_o_f1;
			4'b0100: src1_f1_d = rfWriteData_p0;
			4'b0101: src1_f1_d = LO_d;
			4'b0110: src1_f1_d = HI_d;
			4'b0111: src1_f1_d = HI_f1;
			4'b1000: src1_f1_d = LO_f1;
			default: src1_f1_d = src1;
		endcase
	end

	always_comb begin
		unique case (sB_f2)
			1'b0: rt = src1_f1;
			1'b1: rt = signext_f2;
			default: rt = 0;
		endcase
	end
	
	always_comb begin
		unique case (sC_f1)
			1'b0: begin
				rfReadEn_p0 = 0;
				rfReadEn_p1 = 0;
			end
			1'b1: begin
				rfReadEn_p0 = 1;
				rfReadEn_p1 = 1;
			end 
			default: begin
				rfReadEn_p0 = 0;
				rfReadEn_p1 = 0;
			end
		endcase
	end

	always_comb begin
		unique case (sD_f3)
			1'b0: dCacheReadEn = 0;
			1'b1: dCacheReadEn = 1;
			default: dCacheReadEn = 0;
		endcase
	end

	always_comb begin
		unique case (sE_f3) 
			1'b0: dCacheWriteEn = 0;
			1'b1: dCacheWriteEn = 1;
			default: dCacheWriteEn = 0;
		endcase
	end

	always_comb begin
		unique case (sF_f4)
			1'b0: begin
				rfWriteAddr_p0 = instr15_11Dec_f4;
			end
			1'b1: begin
				rfWriteAddr_p0 = instr20_16Dec_f4;
			end
			default: begin
				rfWriteAddr_p0 = 0;
			end
		endcase
	end

	always_comb begin
		unique case (sG_f4) 
			2'b00: begin
				rfWriteData_p0 = dCacheReadData_f1;
			end
			2'b01: begin
				rfWriteData_p0 = alu_o_f2;
			end
			2'b10: begin
				rfWriteData_p0 = LO_f2;
			end
			2'b11: begin
				rfWriteData_p0 = HI_f2;
			end
			default: begin
				rfWriteData_p0 = 0;
			end
		endcase
	end

	always_comb begin
		unique case (sH_f4) 
			1'b0: begin
				rfWriteEn_p0 = 0;
			end
			1'b1: begin
				rfWriteEn_p0 = 1;
			end 
			default: begin
				rfWriteEn_p0 = 0;
			end
		endcase
	end

	always_comb begin
		if (cnt == 0) begin
			PC_Next = PC;
		end
		else begin
			unique case (sI)
				3'b000: begin
					PC_Next = PC;
				end
				3'b001: begin
					PC_Next = PC + 4;
				end
				3'b010: begin
					PC_Next = PC_f2 + {{14{instr_f1[15]}},{instr_f1[15:0]},{2'b0}};
				end
				3'b011: begin
					PC_Next = {{PC[31:28]},{original_instr[25:0]},{2'b0}};
				end
				3'b100: begin
					PC_Next = src0 + PC_f1;
				end
				3'b101: begin
					PC_Next = iCacheReadAddr;
				end
				3'b110: begin
					PC_Next = PC_f2 + 4;
				end
				default: begin
					PC_Next = PC;
				end
			endcase
		end
	end

	always_comb begin
		opcode = instr[31:26];
		special = instr[5:0];
		unique case(opcode)
		6'b000000: begin
			unique case(special)
				6'b100000: begin 
					alu_op = 20'b10000000000000000000; //ADD
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
				6'b100100: begin 
					alu_op = 20'b01000000000000000000; //AND
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
                                6'b000000: begin
                                        alu_op = 20'b00000000000000000111; //SLL
                                        sA = 1;
                                        sB = 0;
                                        sC = 1;
                                        sD = 0;
                                        sE = 0;
                                        sF = 0;
                                        sG = 1;
                                        sH = 1;
                                end
				6'b100111: begin 
					alu_op = 20'b00100000000000000000; //NOR
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
				6'b100101: begin 
					alu_op = 20'b00010000000000000000; //OR
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
                                6'b011000: begin
                                        alu_op = 20'b00000000000000011111; //MULT
                                        sA = 0;
                                        sB = 0;
                                        sC = 1;
                                        sD = 0;
                                        sE = 0;
                                        sF = 0;
                                        sG = 1;
                                        sH = 0;
                                end
                                6'b010010: begin
                                        alu_op = 20'b00000000000011111111; //MFLO (use same OPcode as ADD)
                                        sA = 0;
                                        sB = 0;
                                        sC = 0;
                                        sD = 0;
                                        sE = 0;
                                        sF = 0;
                                        sG = 2;
                                        sH = 1;
				end
                                6'b010000: begin
                                        alu_op = 20'b00000000000001111111; //MFHI (use same OPcode as ADD)
                                        sA = 0;
                                        sB = 0;
                                        sC = 0;
                                        sD = 0;
                                        sE = 0;
                                        sF = 0;
                                        sG = 3;
                                        sH = 1;
                                end
                                6'b011010: begin
                                        alu_op = 20'b00000000000000111111; //DIV
                                        sA = 0;
                                        sB = 0;
                                        sC = 1;
                                        sD = 0;
                                        sE = 0;
                                        sF = 0;
                                        sG = 1;
                                        sH = 0;
                                end
				6'b101010: begin 
					alu_op = 20'b00001000000000000000; //SLT
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
				6'b100010: begin 
					alu_op = 20'b00000100000000000000; //SUB
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
				6'b100110: begin 
					alu_op = 20'b00000010000000000000; //XOR
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
				6'b000011: begin 
					alu_op = 20'b00000001000000000000; //SRA
					sA = 1;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 1;
					sH = 1;
				end
				6'b001000: begin
					alu_op = 20'b00000000100000000000; //JR
					sA = 0;
					sB = 0;
					sC = 1;
					sD = 0;
			                sE = 0;
					sF = 0;
					sG = 0;
					sH = 0;
				end
                                6'b100001: begin
                                        alu_op = 20'b10000000000000000000; //ADDU, same as ADD
                                        sA = 0;
                                        sB = 0;
                                        sC = 1;
                                        sD = 0;
                                        sE = 0;
                                        sF = 0;
                                        sG = 1;
                                        sH = 1;
                                end
			endcase
		end
		6'b001000: begin 
			alu_op = 20'b00000000010000000000; //ADDI 
			sA = 0;
			sB = 1;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 1;
			sG = 1;
			sH = 1;
		end
		6'b001100: begin 
			alu_op = 20'b00000000001000000000; //ANDI
			sA = 0;
			sB = 1;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 1;
			sG = 1;
			sH = 1;
		end
                6'b001001: begin
                        alu_op = 20'b00000000010000000000; //ADDIU, same as ADDI
                        sA = 0;
                        sB = 1;
                        sC = 1;
                        sD = 0;
                        sE = 0;
                        sF = 1;
                        sG = 1;
                        sH = 1;
                end
		6'b001101: begin 
			alu_op = 20'b00000000000100000000; //ORI
			sA = 0;
			sB = 1;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 1;
			sG = 1;
			sH = 1;
		end
		6'b001010: begin 
			alu_op = 20'b00000000000010000000; //SLTI
			sA = 0;
			sB = 1;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 1;
			sG = 1;
			sH = 1;
		end
		6'b001110: begin 
			alu_op = 20'b00000000000001000000; //XORI
			sA = 0;
			sB = 1;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 1;
			sG = 1;
			sH = 1;
		end
		6'b100011: begin
			alu_op = 20'b00000000000000100000; //LW
			sA = 0;
			sB = 1;
			sC = 1;
			sD = 1;
			sE = 0;
			sF = 1;
			sG = 0;
			sH = 1;
		end
                6'b001111: begin
                        alu_op = 20'b00000000000000000011;      //LUI
                        sA = 0;
                        sB = 1;
                        sC = 0;
                        sD = 0;
                        sE = 0;
                        sF = 1;
                        sG = 1;
                        sH = 1;
                end
		6'b101011: begin 
			alu_op = 20'b00000000000000010000; //SW
			sA = 0;
			sB = 1;
			sC = 1;
			sD = 0;
			sE = 1;
			sF = 0;
			sG = 0;
			sH = 0;
		end
		6'b000100: begin 
			alu_op = 20'b00000000000000001000; //BEQ
			sA = 0;
			sB = 0;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 0;
			sG = 0;
			sH = 0;
		end
		6'b000111: begin 
			alu_op = 20'b00000000000000000100; //BGTZ
			sA = 0;
			sB = 0;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 0;
			sG = 0;
			sH = 0;
		end
		6'b000101: begin 
			alu_op = 20'b00000000000000000010; //BNE
			sA = 0;
			sB = 0;
			sC = 1;
			sD = 0;
			sE = 0;
			sF = 0;
			sG = 0;
			sH = 0;
		end
		6'b000010: begin 
			alu_op = 20'b00000000000000000001; //J
			sA = 0;
			sB = 0;
			sC = 0;
			sD = 0;
			sE = 0;
			sF = 0;
			sG = 0;
			sH = 0;
		end
		default: begin
			sA = 0;
			sB = 0;
			sC = 0;
			sD = 0;
			sE = 0;
			sF = 0;
			sG = 0;
			sH = 0;
		end
		endcase
	end


endmodule: mipsCore
